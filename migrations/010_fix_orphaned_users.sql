-- =====================================================
-- MIGRATION 010: FIX ORPHANED USERS
-- =====================================================
-- Descri√ß√£o: Conserta usu√°rios √≥rf√£os (auth.users sem user_profiles)
-- Data: 2025-10-29
-- Fase: 3 (Hotfix)
--
-- O que faz:
-- 1. Identifica usu√°rios em auth.users que n√£o t√™m user_profiles
-- 2. Cria user_profiles automaticamente usando client_id do user_metadata
-- 3. Report de usu√°rios consertados
--
-- QUANDO USAR:
-- - Ap√≥s registrar usu√°rio e trigger handle_new_user() n√£o executar
-- - Usu√°rios existentes criados manualmente
-- - Problemas de sincroniza√ß√£o entre auth.users e user_profiles
-- =====================================================

-- =====================================================
-- PARTE 1: IDENTIFICAR USU√ÅRIOS √ìRF√ÉOS
-- =====================================================

DO $$
DECLARE
  orphaned_count INTEGER;
BEGIN
  -- Contar usu√°rios √≥rf√£os
  SELECT COUNT(*) INTO orphaned_count
  FROM auth.users u
  LEFT JOIN public.user_profiles p ON p.id = u.id
  WHERE p.id IS NULL;

  RAISE NOTICE '';
  RAISE NOTICE '========================================';
  RAISE NOTICE 'üîç MIGRATION 010: FIX ORPHANED USERS';
  RAISE NOTICE '========================================';
  RAISE NOTICE '';
  RAISE NOTICE 'üìä Usu√°rios √≥rf√£os encontrados: %', orphaned_count;
  RAISE NOTICE '';

  IF orphaned_count = 0 THEN
    RAISE NOTICE '‚úÖ Nenhum usu√°rio √≥rf√£o encontrado!';
    RAISE NOTICE '';
    RETURN;
  END IF;

  -- Listar usu√°rios √≥rf√£os
  RAISE NOTICE 'üë• Usu√°rios sem profile:';
  FOR u IN (
    SELECT
      u.id,
      u.email,
      u.raw_user_meta_data->>'client_id' as metadata_client_id,
      u.created_at
    FROM auth.users u
    LEFT JOIN public.user_profiles p ON p.id = u.id
    WHERE p.id IS NULL
    ORDER BY u.created_at DESC
  ) LOOP
    RAISE NOTICE '  - % (%) | client_id in metadata: %',
      u.email,
      u.id,
      CASE WHEN u.metadata_client_id IS NOT NULL THEN 'YES' ELSE 'NO ‚ö†Ô∏è' END;
  END LOOP;

  RAISE NOTICE '';
END $$;

-- =====================================================
-- PARTE 2: CRIAR PROFILES PARA USU√ÅRIOS √ìRF√ÉOS
-- =====================================================

DO $$
DECLARE
  u RECORD;
  created_count INTEGER := 0;
  skipped_count INTEGER := 0;
BEGIN
  RAISE NOTICE 'üîß Criando profiles para usu√°rios √≥rf√£os...';
  RAISE NOTICE '';

  -- Iterar sobre usu√°rios √≥rf√£os
  FOR u IN (
    SELECT
      u.id,
      u.email,
      u.raw_user_meta_data->>'client_id' as metadata_client_id,
      u.raw_user_meta_data->>'full_name' as full_name
    FROM auth.users u
    LEFT JOIN public.user_profiles p ON p.id = u.id
    WHERE p.id IS NULL
  ) LOOP
    -- Verificar se user_metadata tem client_id
    IF u.metadata_client_id IS NULL THEN
      RAISE WARNING '  ‚ö†Ô∏è  SKIPPED: % - user_metadata sem client_id', u.email;
      RAISE WARNING '      Solu√ß√£o: Deletar usu√°rio e registrar novamente via /register';
      skipped_count := skipped_count + 1;
      CONTINUE;
    END IF;

    -- Verificar se client_id existe na tabela clients
    IF NOT EXISTS (SELECT 1 FROM public.clients WHERE id = u.metadata_client_id::UUID) THEN
      RAISE WARNING '  ‚ö†Ô∏è  SKIPPED: % - client_id % n√£o existe na tabela clients',
        u.email, u.metadata_client_id;
      RAISE WARNING '      Solu√ß√£o: Criar client manualmente ou deletar usu√°rio';
      skipped_count := skipped_count + 1;
      CONTINUE;
    END IF;

    -- Criar user_profile
    BEGIN
      INSERT INTO public.user_profiles (id, client_id, email, full_name, created_at, updated_at)
      VALUES (
        u.id,
        u.metadata_client_id::UUID,
        u.email,
        u.full_name,
        NOW(),
        NOW()
      );

      RAISE NOTICE '  ‚úÖ CREATED: % ‚Üí client_id: %', u.email, u.metadata_client_id;
      created_count := created_count + 1;

    EXCEPTION
      WHEN unique_violation THEN
        RAISE WARNING '  ‚ö†Ô∏è  SKIPPED: % - profile j√° existe (unique violation)', u.email;
        skipped_count := skipped_count + 1;
      WHEN foreign_key_violation THEN
        RAISE WARNING '  ‚ö†Ô∏è  SKIPPED: % - client_id inv√°lido (foreign key violation)', u.email;
        skipped_count := skipped_count + 1;
      WHEN OTHERS THEN
        RAISE WARNING '  ‚ùå ERROR: % - %', u.email, SQLERRM;
        skipped_count := skipped_count + 1;
    END;
  END LOOP;

  RAISE NOTICE '';
  RAISE NOTICE '========================================';
  RAISE NOTICE 'üìä SUMMARY';
  RAISE NOTICE '========================================';
  RAISE NOTICE '  ‚úÖ Profiles criados: %', created_count;
  RAISE NOTICE '  ‚ö†Ô∏è  Usu√°rios ignorados: %', skipped_count;
  RAISE NOTICE '';

  IF created_count > 0 THEN
    RAISE NOTICE 'üéâ Migration conclu√≠da com sucesso!';
  ELSIF skipped_count > 0 THEN
    RAISE NOTICE '‚ö†Ô∏è  Alguns usu√°rios precisam de corre√ß√£o manual';
  END IF;

  RAISE NOTICE '';
END $$;

-- =====================================================
-- PARTE 3: VERIFICA√á√ÉO FINAL
-- =====================================================

DO $$
DECLARE
  total_users INTEGER;
  users_with_profiles INTEGER;
  orphaned_users INTEGER;
BEGIN
  -- Contar usu√°rios
  SELECT COUNT(*) INTO total_users FROM auth.users;
  SELECT COUNT(*) INTO users_with_profiles
  FROM auth.users u
  INNER JOIN public.user_profiles p ON p.id = u.id;

  orphaned_users := total_users - users_with_profiles;

  RAISE NOTICE '========================================';
  RAISE NOTICE 'üîç VERIFICATION';
  RAISE NOTICE '========================================';
  RAISE NOTICE '  Total de usu√°rios: %', total_users;
  RAISE NOTICE '  Com profiles: %', users_with_profiles;
  RAISE NOTICE '  √ìrf√£os: %', orphaned_users;
  RAISE NOTICE '';

  IF orphaned_users = 0 THEN
    RAISE NOTICE '‚úÖ Todos os usu√°rios t√™m profiles v√°lidos!';
  ELSE
    RAISE NOTICE '‚ö†Ô∏è  Ainda existem % usu√°rios √≥rf√£os', orphaned_users;
    RAISE NOTICE '   Execute novamente ou conserte manualmente';
  END IF;

  RAISE NOTICE '';
END $$;

-- =====================================================
-- PARTE 4: QUERY √öTIL PARA DEBUG
-- =====================================================

-- Descomentar para ver detalhes completos:

/*
SELECT
  u.id as user_id,
  u.email,
  u.created_at as user_created_at,
  u.raw_user_meta_data->>'client_id' as metadata_client_id,
  u.raw_user_meta_data->>'full_name' as metadata_full_name,
  p.id as profile_id,
  p.client_id as profile_client_id,
  p.full_name as profile_full_name,
  c.name as client_name,
  c.status as client_status,
  CASE
    WHEN p.id IS NULL THEN '‚ùå SEM PROFILE'
    WHEN p.client_id IS NULL THEN '‚ö†Ô∏è  PROFILE SEM CLIENT_ID'
    WHEN c.id IS NULL THEN '‚ö†Ô∏è  CLIENT N√ÉO EXISTE'
    WHEN c.status != 'active' THEN '‚ö†Ô∏è  CLIENT INATIVO'
    ELSE '‚úÖ OK'
  END as status
FROM auth.users u
LEFT JOIN public.user_profiles p ON p.id = u.id
LEFT JOIN public.clients c ON c.id = p.client_id
ORDER BY u.created_at DESC;
*/

-- =====================================================
-- FIM DA MIGRATION 010
-- =====================================================

RAISE NOTICE '========================================';
RAISE NOTICE '‚úÖ MIGRATION 010 COMPLETED';
RAISE NOTICE '========================================';
